-- 1. Table des rôles
CREATE TABLE Roles(
   role_id INT PRIMARY KEY,
   role VARCHAR(50) UNIQUE NOT NULL
);

-- 2. Catégories de produits (hiérarchiques)
CREATE TABLE Categories(
   category_id INT PRIMARY KEY,
   name VARCHAR(50) UNIQUE NOT NULL,
   parent_category_id INT,
   FOREIGN KEY (parent_category_id) REFERENCES Categories(category_id)
);

-- 3. Table des produits
CREATE TABLE Products(
   product_id INT PRIMARY KEY,
   product VARCHAR(50) NOT NULL,
   description TEXT,
   price DECIMAL(10,2) NOT NULL CHECK (price > 0),
   img TEXT,
   stock INT DEFAULT 0 CHECK (stock >= 0),
   created_at DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- 4. Liaison produits/catégories
CREATE TABLE ProductCategory(
   product_id INT,
   category_id INT,
   PRIMARY KEY (product_id, category_id),
   FOREIGN KEY (product_id) REFERENCES Products(product_id),
   FOREIGN KEY (category_id) REFERENCES Categories(category_id)
);

-- 5. Utilisateurs et rôles
CREATE TABLE UsersRole(
   user_id INT PRIMARY KEY,
   nickName VARCHAR(50) UNIQUE NOT NULL,
   mail VARCHAR(50) UNIQUE NOT NULL,
   password CHAR(60) NOT NULL,
   verified BOOLEAN DEFAULT FALSE,
   created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
   role_id INT NOT NULL,
   FOREIGN KEY (role_id) REFERENCES Roles(role_id)
);

-- 6. Adresses des utilisateurs
CREATE TABLE Addresses(
   address_id INT PRIMARY KEY,
   user_id INT NOT NULL,
   street VARCHAR(100) NOT NULL,
   city VARCHAR(50) NOT NULL,
   zip_code VARCHAR(20) NOT NULL,
   country VARCHAR(50) NOT NULL,
   phone VARCHAR(20) NOT NULL,
   is_default BOOLEAN DEFAULT FALSE,
   FOREIGN KEY (user_id) REFERENCES UsersRole(user_id)
);

-- 7. Panier d'achat
CREATE TABLE Cart(
   cart_id INT PRIMARY KEY,
   user_id INT NOT NULL UNIQUE,
   created_at DATESQL> DATE DEFAULT CURRENT_TIMESTAMP,
   FOREIGN KEY (user_id) REFERENCES UsersRole(user_id)
);

-- 8. Contenu du panier
CREATE TABLE quantity_cart(
   cart_id INT,
   product_id INT,
   quantity INT NOT NULL CHECK (quantity > 0),
   PRIMARY KEY (cart_id, product_id),
   FOREIGN KEY (cart_id) REFERENCES Cart(cart_id),
   FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- 9. Commandes
CREATE TABLE Purchases(
   purchase_id INT PRIMARY KEY,
   user_id INT NOT NULL,
   purchase_date DATETIME DEFAULT CURRENT_TIMESTAMP,
   total_amount DECIMAL(10,2) NOT NULL CHECK (total_amount >= 0),
   status ENUM('panier', 'payé', 'expédié', 'livré', 'annulé') DEFAULT 'panier',
   address_id INT NOT NULL,
   payment_method VARCHAR(50) NOT NULL,
   FOREIGN KEY (user_id) REFERENCES UsersRole(user_id),
   FOREIGN KEY (address_id) REFERENCES Addresses(address_id)
);

-- 10. Détails des commandes
CREATE TABLE PurchaseDetails(
   purchase_id INT,
   product_id INT,
   quantity INT NOT NULL CHECK (quantity > 0),
   unit_price DECIMAL(10,2) NOT NULL CHECK (unit_price >= 0),
   PRIMARY KEY (purchase_id, product_id),
   FOREIGN KEY (purchase_id) REFERENCES Purchases(purchase_id),
   FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- 11. Paiements
CREATE TABLE Payments(
   payment_id INT PRIMARY KEY,
   purchase_id INT NOT NULL,
   amount DECIMAL(10,2) NOT NULL CHECK (amount >= 0),
   payment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
   payment_status ENUM('réussi', 'échoué', 'en attente') NOT NULL,
   transaction_id VARCHAR(100) UNIQUE,
   FOREIGN KEY (purchase_id) REFERENCES Purchases(purchase_id)
);

-- 12. Commentaires et notes
CREATE TABLE Comments(
   comment_id INT PRIMARY KEY,
   user_id INT NOT NULL,
   product_id INT NOT NULL,
   content TEXT NOT NULL,
   comment_date DATETIME DEFAULT CURRENT_TIMESTAMP,
   rating INT NOT NULL CHECK (rating BETWEEN 1 AND 5),
   FOREIGN KEY (user_id) REFERENCES UsersRole(user_id),
   FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- 13. Articles de blog
CREATE TABLE articles(
   article_id INT PRIMARY KEY,
   title VARCHAR(50) NOT NULL,
   article_date DATE NOT NULL,
   content TEXT NOT NULL,
   img VARCHAR(100),
   author_id INT NOT NULL,
   FOREIGN KEY (author_id) REFERENCES UsersRole(user_id)
);

-- 14. Produits liés aux articles
CREATE TABLE product_by_article(
   product_id INT,
   article_id INT,
   PRIMARY KEY (product_id, article_id),
   FOREIGN KEY (product_id) REFERENCES Products(product_id),
   FOREIGN KEY (article_id) REFERENCES articles(article_id)
);

-- 15. Coupons de réduction
CREATE TABLE Coupons(
   coupon_id INT PRIMARY KEY,
   code VARCHAR(20) UNIQUE NOT NULL,
   discount_type ENUM('pourcentage', 'montant') NOT NULL,
   discount_value DECIMAL(10,2) NOT NULL CHECK (discount_value > 0),
   valid_from DATE NOT NULL,
   valid_until DATE NOT NULL,
   max_uses INT CHECK (max_uses > 0)
);

-- 16. Utilisation des coupons
CREATE TABLE CouponUsage(
   coupon_id INT,
   user_id INT,
   usage_date DATETIME DEFAULT CURRENT_TIMESTAMP,
   purchase_id INT NOT NULL,
   PRIMARY KEY (coupon_id, user_id, purchase_id),
   FOREIGN KEY (coupon_id) REFERENCES Coupons(coupon_id),
   FOREIGN KEY (user_id) REFERENCES UsersRole(user_id),
   FOREIGN KEY (purchase_id) REFERENCES Purchases(purchase_id)
);

-- 17. Liste de souhaits
CREATE TABLE Wishlist(
   user_id INT,
   product_id INT,
   added_date DATETIME DEFAULT CURRENT_TIMESTAMP,
   PRIMARY KEY (user_id, product_id),
   FOREIGN KEY (user_id) REFERENCES UsersRole(user_id),
   FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

-- Index optimisés
CREATE UNIQUE INDEX idx_users_email ON UsersRole(mail);
CREATE INDEX idx_products_price ON Products(price);
CREATE INDEX idx_purchases_date ON Purchases(purchase_date);
